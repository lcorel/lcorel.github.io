<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZZONN</title>
  
  <subtitle>Think like an artist, develop like an artisan</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zzonn.com/"/>
  <updated>2020-04-17T02:39:20.981Z</updated>
  <id>http://blog.zzonn.com/</id>
  
  <author>
    <name>LiPan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务架构技术栈</title>
    <link href="http://blog.zzonn.com/2020/04/17/%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    <id>http://blog.zzonn.com/2020/04/17/%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%8A%80%E6%9C%AF%E6%A0%88/</id>
    <published>2020-04-17T02:35:10.923Z</published>
    <updated>2020-04-17T02:39:20.981Z</updated>
    
    <content type="html"><![CDATA[<p>title: 服务架构技术栈<br>date: 2020-04-03 11:36:18<br>updated: 2020-04-03  11:36:55<br>toc: true<br>categories: 架构<br>tags: 微服务</p><h2 id="微服务的前世今生"><a href="#微服务的前世今生" class="headerlink" title="微服务的前世今生"></a>微服务的前世今生</h2><p>与微服务架构相对的，叫单体架构。这是我们最熟悉的开发方式，就是一个项目搞定业务全过程，在同一个进程里面完成。随着业务发展，数据量和并发上去了，一般会选择右边的垂直拆分，拆分后的每个系统，依旧是单体架构的。</p><p>![]( <a href="https://blog.zzonn.com/images/wfwjgjsz">https://blog.zzonn.com/images/wfwjgjsz</a> (1).png)</p><p>垂直拆分后，子系统都能独立做集群，承载能力大大提升。但随着业务进一步发展，子系统会越来臃肿，而且根据二八原则，80%的请求其实都集中在20%的业务上，不同的子系统也都有很多重复的功能模块。于是乎分布式就诞生了，将高频重复的功能拆成独立的服务部署，各系统都通过调用服务来完成功能。</p><p>![]( <a href="https://blog.zzonn.com/images/wfwjgjsz">https://blog.zzonn.com/images/wfwjgjsz</a> (2).png)</p><p>分布式拆出服务独立部署和维护， 既完成了功能的复用，又能保证高频服务的伸缩性和高可用，代表着更高的生产力。然而欲戴王冠必承其重，分布式带来的问题跟提供的价值一样多，比如分布式锁、一致性、可用性、复杂度等要命问题。</p><p>图3</p><p>随着时间推移，业务倒逼技术进步，在大数据高并发的要求下，分布式技术慢慢开始成熟，针对各种问题都形成了行之有效的办法，然后分布式也成了架构设计系统的常规手段。基于服务的形式来完成对业务的解耦，提供高可用和伸缩性的特性，满足了日益增长的业务需求。随着业务的不断拆分，粒度越来越细，一个新的称谓微服务(Microservice)就应运而生！</p><p>图4</p><p>什么是微服务架构？我理解为是一种架构设计系统的风格，基于小粒度的服务来完成对业务的解耦，将业务流程拆分成多个服务组装。就像以前三层架构里面，一个业务会调用多个BLL方法，而现在换成了调用多个服务。这就是微服务了，当然，小伙伴儿认真想想会发现，真的要落地微服务，问题太多了！下面，我就以.Net Core技术栈下，对微服务架构落地的种种问题和解决方案来一一探讨！</p><h2 id="落地微服务架构"><a href="#落地微服务架构" class="headerlink" title="落地微服务架构"></a>落地微服务架构</h2><h3 id="一-、进程间通信"><a href="#一-、进程间通信" class="headerlink" title="一 、进程间通信"></a>一 、进程间通信</h3><p>这个是构建微服务的基础，通常有以下三大类：</p><ol><li>基于第三方存储共享的通讯(数据库/Redis/队列等)</li><li>基于Http协议的服务(WebService/WCF/WebApi)</li><li>远程调用模式(FX下的RPC和.Net Core下的gRPC)</li></ol><h3 id="二、服务注册与发现"><a href="#二、服务注册与发现" class="headerlink" title="二、服务注册与发现"></a><strong>二、服务注册与发现</strong></h3><p>微服务架构是搭建在底层服务实例基础上，必须通过集群来保证服务的高可用和动态伸缩，因此服务注册，服务发现，健康检查，异常下线功能都是必须的，在.Net Core下可以考虑选择Consul(首选)、etcd或者ZooKeeper。</p><p>图5</p><h3 id="三、网关Gateway"><a href="#三、网关Gateway" class="headerlink" title="三、网关Gateway"></a><strong>三、网关Gateway</strong></h3><p>微服务架构支持多客户端共用服务，而且底层服务数目众多，不可能全部都暴露给外部客户端(安全隐患/公网IP)，而且多客户端也不可能维护无止境的服务实例地址，因此网关gateway是必须的！就像门面模式Façade一样管理好底层服务，通过路由映射底层服务实例，客户端一律通过网关来完成服务调用。此外，由于请求都从网关走，那么也可以在网关这里完成鉴权授权、限流、熔断、降级等进阶功能。</p><p>图6</p><h3 id="四、鉴权授权"><a href="#四、鉴权授权" class="headerlink" title="四、鉴权授权"></a><strong>四、鉴权授权</strong></h3><p>微服务架构里到处都是服务实例，还都是集群化部署，甚至还兼容不同技术平台的服务实例，传统的session共享式做权限验证已经行不通了，当下都是使用token来做用户识别。大致原理如下图，由鉴权中心颁发token，然后带着token去访问各服务实例。在.Net Core里面首选IdentityServer4或者JWT。在真实落地微服务时，一般会建立个独立的鉴权中心，然后在网关层完成鉴权授权，非常方便。</p><p>图7</p><p><strong>以上是系统架构，往下是功能性需求</strong></p><h3 id="五、瞬态故障处理"><a href="#五、瞬态故障处理" class="headerlink" title="五、瞬态故障处理"></a><strong>五、瞬态故障处理</strong></h3><p>真的去写代码时，你会发现调用服务总没有调用方法那么方便，会因为网络、延迟等造成种种意外，因此需要一种优雅的方式来执行请求重试、超时处理、故障恢复等策略，目前.Net Core下推荐使用Polly，常见应用是集成到gateway或者AOP的模式插入到客户端里面。</p><p>图8</p><h3 id="六、分布式追踪"><a href="#六、分布式追踪" class="headerlink" title="六、分布式追踪"></a><strong>六、分布式追踪</strong></h3><p>一个请求会涉及多个服务，而服务本身还有依赖，整个请求路径就构成了一个网状的调用链，想象一下其实挺害怕！在整个调用链中一旦某个节点发生异常，整个调用链的稳定性就会受到影响，因此必须得有跟踪请求，性能分析的工具，以便快速定位和解决问题。SkyWalking (推荐)、Cat、Zipkin、Pinpoint都是可选项，这里就不建议大家自己造轮子了。</p><p>图9</p><h3 id="七、日志收集与分析"><a href="#七、日志收集与分析" class="headerlink" title="七、日志收集与分析"></a><strong>七、日志收集与分析</strong></h3><p>微服务下的日志已经不是单机系统日志那么简单，茫茫多的服务节点，复杂的依赖调用关系，会带来海量的日志，一套优秀的分布式日志收集和分析框架是必须入手的，这里我给大家推荐的是ExceptionLess，入手简单资料齐全。</p><p>图10</p><h3 id="八、统一配置中心"><a href="#八、统一配置中心" class="headerlink" title="八、统一配置中心"></a><strong>八、统一配置中心</strong></h3><p>配置管理平台是必不可少的，那么多服务那么多集群，一个个人肉管理会疯掉的。Apollo能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，是由携程框架部门研发的开源配置管理中心，.Net社区的骄傲，点赞！</p><p>图11</p><h3 id="九、分布式锁"><a href="#九、分布式锁" class="headerlink" title="九、分布式锁"></a><strong>九、分布式锁</strong></h3><p>单体架构下，多线程操作同一个对象，可以用lock锁保证只有一个线程能进入，微服务架构多进程下，怎么管控？核心思路是基于第三方的共享数据访问加上互斥逻辑来完成管控，像数据库/Nosql/Consul等介质均可。实践中，Redis是首选不解释。</p><p>图12</p><h3 id="十、分布式事务"><a href="#十、分布式事务" class="headerlink" title="十、分布式事务"></a><strong>十、分布式事务</strong></h3><p>CAP有言，在分布式的情况下，系统的可用性和一致性是没法同时满足的。微服务体系下，一个业务请求都需要N个服务节点协作，可用性是最高优先级，否则系统没法正常运转了。那如何数据的一致性怎么办？当下主流的模式有3种，2PC/3PC，TCC以及本地消息表，前一个是牺牲可用性去保障一致性，用的较少，后面都是保障数据最终一致性。目前在互联网公司主流选择是下图的基于消息队列的分布式事务实现。</p><p>图13</p><h3 id="十一、Jenkins-CI-CD"><a href="#十一、Jenkins-CI-CD" class="headerlink" title="十一、Jenkins-CI/CD"></a><strong>十一、Jenkins-CI/CD</strong></h3><p>持续集成持续交付(CI/CD)是敏捷开发的核心，在微服务架构下也是常备的。简单来说，就是能持续的合并代码分支纳入新功能，能持续的交付产出给下游，让整个项目进展肉眼可见。不过静心想想就知道有很多麻烦事儿，所以这一切就交给专业的工具来完成了，Jenkins值得拥有。</p><p>图14</p><h3 id="十二、Docker容器部署"><a href="#十二、Docker容器部署" class="headerlink" title="十二、Docker容器部署"></a><strong>十二、Docker容器部署</strong></h3><p>微服务架构里，需要快捷启动服务实例，支持不同系统环境，不同运行环境，不同语言的各种服务实例，独立的物理服务器是不现实的，虚拟化技术的成本太高，快捷的沙箱环境+高效的资源利用+可复制快速启动的容器Docker 成为首选，Build Once,Run AnyWhere!不会docker的程序员，已经不是一个好的工程师了。</p><p>图15</p><h3 id="十三、容器编排Kubernetes"><a href="#十三、容器编排Kubernetes" class="headerlink" title="十三、容器编排Kubernetes"></a><strong>十三、容器编排Kubernetes</strong></h3><p>有了Docker，我们可以肆无忌惮轻松惬意的扩充服务实例，乐极生悲，容器实例可能会膨胀到你控制不住的地步，可能一个月后整个团队就没人能搞清楚服务和容器间错综复杂的关系了。所以你需要一个管理工具，那就是Kubernete，用于编排容器，是管理应用的全生命周期的工具，可以理解为docker管家。</p><p>图16</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: 服务架构技术栈&lt;br&gt;date: 2020-04-03 11:36:18&lt;br&gt;updated: 2020-04-03  11:36:55&lt;br&gt;toc: true&lt;br&gt;categories: 架构&lt;br&gt;tags: 微服务&lt;/p&gt;
&lt;h2 id=&quot;微服务的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>职级评定标准</title>
    <link href="http://blog.zzonn.com/2020/04/10/%E8%81%8C%E7%BA%A7%E8%AF%84%E5%AE%9A%E6%A0%87%E5%87%86/"/>
    <id>http://blog.zzonn.com/2020/04/10/%E8%81%8C%E7%BA%A7%E8%AF%84%E5%AE%9A%E6%A0%87%E5%87%86/</id>
    <published>2020-04-10T09:30:04.000Z</published>
    <updated>2020-04-10T09:32:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🌀助理"><a href="#🌀助理" class="headerlink" title="🌀助理"></a>🌀助理</h2><h3 id="💥能力要求"><a href="#💥能力要求" class="headerlink" title="💥能力要求"></a>💥能力要求</h3><ol><li>具有较强的学习能力，可以编写代码，达到公司的工作要求</li></ol><h2 id="🌀初级"><a href="#🌀初级" class="headerlink" title="🌀初级"></a>🌀初级</h2><h3 id="💥硬性指标"><a href="#💥硬性指标" class="headerlink" title="💥硬性指标"></a>💥硬性指标</h3><ol><li>具备一年以上软件开发经验</li></ol><h3 id="💥能力要求-1"><a href="#💥能力要求-1" class="headerlink" title="💥能力要求"></a>💥能力要求</h3><ol><li><p>能够独立完成项目中功能级代码开发；(完成任务能力)</p></li><li><p>具备计算机和软件开发的基础知识，熟练掌握至少一种软件开发工具；熟练掌握至少一门编程语言；(知识水平)</p></li><li><p>能够根据工作需要，在老员工的帮助下，快速掌握新的开发语言和开发工具；(学习能力)</p></li><li><p>具备较好的沟通能力；(沟通能力)</p></li><li><p>具备较强的责任心；(责任心)</p></li><li><p>具备良好的软件编程习惯，能够遵循软件开发规范，基本上能按时完成所分配的工作，所编写的代码少有BUG；(基本素养)</p><a id="more"></a> </li></ol><h2 id="🌀中级"><a href="#🌀中级" class="headerlink" title="🌀中级"></a>🌀中级</h2><h3 id="💥硬性指标-1"><a href="#💥硬性指标-1" class="headerlink" title="💥硬性指标"></a>💥硬性指标</h3><ol><li>连续两个季度考核成绩不低于75分</li><li>具备两年以上软件开发经验</li><li>近一年内，无重大技术失误</li></ol><h3 id="💥能力要求-2"><a href="#💥能力要求-2" class="headerlink" title="💥能力要求"></a>💥能力要求</h3><ol><li>熟悉公司产品，熟悉项目开发的基本流程，能够完成产品一般性模块的开发；(完成任务能力)</li><li>能够较快的掌握新的软件开发方法、语言和工具，具备较强的学习能力；(学习能力)</li><li>能够对新同事进行简单技术指导；(培训指导能力 )</li><li>具备良好的沟通和一定的协调能力；(沟通协调能力)</li><li>具备较为全面的计算机和软件知识，至少精通一种软件开发工具，精通掌握至少一门编程语言； (知识水平)</li><li>具有比较丰富的开发经验；(资历)</li><li>具备较强的责任心；(责任心)</li><li>可以参与产品开发过程中的难题攻关，能够提出自己的可行性建议；（攻关能力）</li><li>细致、认真，具备一定的文档能力，具有良好的软件编程习惯；（基本素养）</li></ol><h2 id="🌀中高级"><a href="#🌀中高级" class="headerlink" title="🌀中高级"></a>🌀中高级</h2><h3 id="💥硬性指标-2"><a href="#💥硬性指标-2" class="headerlink" title="💥硬性指标"></a>💥硬性指标</h3><ol><li>连续两个季度考核成绩不低于80分</li><li>具备三年以上软件开发经验</li><li>近一年内，无重大技术失误</li></ol><h3 id="💥能力要求-3"><a href="#💥能力要求-3" class="headerlink" title="💥能力要求"></a>💥能力要求</h3><ol><li>对开发任务具有全局观念，能够完成功能复杂的模块级软件的开发工作；(完成任务能力)</li><li>具备较强的学习能力， 能够及时了解和掌握新的软件发展方向；(学习能力)</li><li>能够对某方面的专业知识给予员工培训，对有难度的技术工作或项目，可以指导同事完成；(培训指导能力)</li><li>具备较好的上下级之间的沟通，能够发现团队协调配合中的问题，具备一定的协调能力；(沟通 协调能力)</li><li>对计算机硬件、软件知识具备全面的理解，在某些方面具备较深的知识储备，能够查阅一般的英文资料；(知识水平)</li><li>在某一领域具有较强的影响力；(资历)</li><li>具备较强的责任心；(责任心)</li><li>在他人的指导下，对产品开发过程中遇到的新问题可以提出可行的解决方案；(攻关能力)</li><li>细致、认真，具有规范的文档能力，具有极好的软件编程习惯；(基本素养)</li></ol><h2 id="🌀高级"><a href="#🌀高级" class="headerlink" title="🌀高级"></a>🌀高级</h2><h3 id="💥硬性指标-3"><a href="#💥硬性指标-3" class="headerlink" title="💥硬性指标"></a>💥硬性指标</h3><ol><li>连续两个季度考核成绩不低于85分</li><li>对员工的专业培训课时80分以上的不少于1个课时</li><li>具备五年以上软件开发经验</li><li>近一年内，无重大技术失误</li></ol><h3 id="💥能力要求-4"><a href="#💥能力要求-4" class="headerlink" title="💥能力要求"></a>💥能力要求</h3><ol><li>按照整体产品部署，完成独立项目的设计、部署和开发工作，对项目级开发任务的进度有良好的把控能力；(完成任务能力)</li><li>通过学习，能在一定程度的指导下，在新的软件领域组织实施开发工作；(学习能力)</li><li>能够对某方面的专业知识给予员工培训；(培训指导能力)</li><li>具备较好的上下级之间的沟通，能够发现团队协调配合中的问题，具备一定的协调能力，(沟通 协调能力)</li><li>对计算机硬件、软件知识具备全面的理解，在某些领域具备较深厚的知识储备，能够查阅英文资料；(知识水平)</li><li>能够在某些领域具有较强的影响力；(资历)</li><li>具备较强的责任心；(责任心)</li><li>对产品开发过程中遇到的新问题可以提出可行的解诀方案，能在新项目中担任主力工程师角色(攻关能力)</li><li>细致、认真，具备规范的文档能力，具有良好的软件工程习惯；(基本素养)</li></ol><h2 id="🌀资深"><a href="#🌀资深" class="headerlink" title="🌀资深"></a>🌀资深</h2><h3 id="💥硬性指标-4"><a href="#💥硬性指标-4" class="headerlink" title="💥硬性指标"></a>💥硬性指标</h3><ol><li>连续两个季度考核成绩不低于85分</li><li>对员工的专业培训课时80分以上的不少于10个课时</li><li>具备七年以上软件开发经验</li><li>近两年内，无重大技术失误</li></ol><h3 id="💥能力要求-5"><a href="#💥能力要求-5" class="headerlink" title="💥能力要求"></a>💥能力要求</h3><ol><li>能够完成独立产品的策划、设计、部署、开发测试工作，能够有效控制产品级开发进度；(完成任务能力)</li><li>通过学习，能够掌握和了解新的软件领域的发展，并能在该领域组织实施开发工作；(学习能力)</li><li>能够对某方面的专业知识给 予员工较为全面的培训；(培训指导能力)</li><li>具备较好的上下级之间的沟通，能够主动发现团队协调配合中的问题，并能及时解诀；(沟通协调能力)</li><li>对软件程序语言、软件设计思想、数据库、软件测试、网络通信等方面具有全面而深入的理解，具备较强的英文水平，能够通过外文文档查阅最新的软件知识，具备一定的数学功底，能够借助资料了解关键领域的数学原理；(知识水平)</li><li>在软件开发的某些方面具备极高的权威性；(资历)</li><li>具备极强的责任心；(责任心)</li><li>极强的攻关能力，具备协调组织解决产品中关键难题的能力；(攻关能力)</li><li>细致、认真，具有良好的软件工程设计和管理思想； (基本素养)</li></ol><h2 id="🌀专家"><a href="#🌀专家" class="headerlink" title="🌀专家"></a>🌀专家</h2><h3 id="💥硬性指标-5"><a href="#💥硬性指标-5" class="headerlink" title="💥硬性指标"></a>💥硬性指标</h3><ol><li>连续两个季度考核成绩不低于85分</li><li>独立带队完成产品级开发3个以上</li><li>对员工的专业培训课时80分以上的不少于20个课时</li><li>近两年内，无重大技术失误</li></ol><h3 id="💥能力要求-6"><a href="#💥能力要求-6" class="headerlink" title="💥能力要求"></a>💥能力要求</h3><ol><li>能够完成整体产品的策划、设计、部署、开发、测试的能力，能够同时管理多个产品的研发进度；(完成任务能力)</li><li>对新的软件领域可以很快熟悉和掌握其核心，并快速部署开发工作，指导开发过程；(学习能力)</li><li>能够对某方面的专业知识给予员工系统、全面的培训；(培训指导能力)</li><li>具备极好的与 上下级之间的沟通，能够主动及时发现团队协调配合中的问题，能够很好的协调下属之间的工作配合；(沟通协调能力)</li><li>具备广泛而深入的计算机专业知识，具备较强的英文水平，能够通过外文文档学习掌握最新的软件知识，具备较强的数学功底，能够理解关键领域的数学原理；(知识水平)</li><li>在软件工程的某些领域具备极高的权威性；(资历)</li><li>具备极强的责任心；(责任心)</li><li>极强的攻关能力，具备协调组织解决产品核心关键难题的能力；(攻关能力)</li><li>细致、认真，能够及时发现下属的纰漏，具有良好的软件工程设计和管理思想；(基本素养)</li></ol><h2 id="📖注"><a href="#📖注" class="headerlink" title="📖注:"></a>📖注:</h2><p>职级标准主要从以下方面考察：</p><h2 id="⭐能力"><a href="#⭐能力" class="headerlink" title="⭐能力"></a>⭐能力</h2><p>带队管理能力、完成任务规模的能力、新领域掌握能力、学习能力、培训能力、 沟通协调能力、文档编写能力、英语语言能力、工具使用能力、攻关能力</p><h2 id="⭐知识"><a href="#⭐知识" class="headerlink" title="⭐知识"></a>⭐知识</h2><p>计算机知识、软件知识、软件工程知识、软件思想、网络通信知识、数学功底、软件测试知识、 数据库知识</p><h2 id="⭐敬业"><a href="#⭐敬业" class="headerlink" title="⭐敬业"></a>⭐敬业</h2><p>责任心、细致程度、规范性</p><h2 id="⭐贡献度"><a href="#⭐贡献度" class="headerlink" title="⭐贡献度"></a>⭐贡献度</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;🌀助理&quot;&gt;&lt;a href=&quot;#🌀助理&quot; class=&quot;headerlink&quot; title=&quot;🌀助理&quot;&gt;&lt;/a&gt;🌀助理&lt;/h2&gt;&lt;h3 id=&quot;💥能力要求&quot;&gt;&lt;a href=&quot;#💥能力要求&quot; class=&quot;headerlink&quot; title=&quot;💥能力要求&quot;&gt;&lt;/a&gt;💥能力要求&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;具有较强的学习能力，可以编写代码，达到公司的工作要求&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;🌀初级&quot;&gt;&lt;a href=&quot;#🌀初级&quot; class=&quot;headerlink&quot; title=&quot;🌀初级&quot;&gt;&lt;/a&gt;🌀初级&lt;/h2&gt;&lt;h3 id=&quot;💥硬性指标&quot;&gt;&lt;a href=&quot;#💥硬性指标&quot; class=&quot;headerlink&quot; title=&quot;💥硬性指标&quot;&gt;&lt;/a&gt;💥硬性指标&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;具备一年以上软件开发经验&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;💥能力要求-1&quot;&gt;&lt;a href=&quot;#💥能力要求-1&quot; class=&quot;headerlink&quot; title=&quot;💥能力要求&quot;&gt;&lt;/a&gt;💥能力要求&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;能够独立完成项目中功能级代码开发；(完成任务能力)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具备计算机和软件开发的基础知识，熟练掌握至少一种软件开发工具；熟练掌握至少一门编程语言；(知识水平)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够根据工作需要，在老员工的帮助下，快速掌握新的开发语言和开发工具；(学习能力)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具备较好的沟通能力；(沟通能力)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具备较强的责任心；(责任心)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具备良好的软件编程习惯，能够遵循软件开发规范，基本上能按时完成所分配的工作，所编写的代码少有BUG；(基本素养)&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://blog.zzonn.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://blog.zzonn.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>敏捷管理-每日站会实践</title>
    <link href="http://blog.zzonn.com/2020/03/22/%E6%95%8F%E6%8D%B7%E7%AE%A1%E7%90%86-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A%E5%AE%9E%E8%B7%B5/"/>
    <id>http://blog.zzonn.com/2020/03/22/%E6%95%8F%E6%8D%B7%E7%AE%A1%E7%90%86-%E6%AF%8F%E6%97%A5%E7%AB%99%E4%BC%9A%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-03-22T00:05:04.000Z</published>
    <updated>2020-03-22T00:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="📖每日站会"><a href="#📖每日站会" class="headerlink" title="📖每日站会"></a>📖每日站会</h2><h3 id="📗会议规定："><a href="#📗会议规定：" class="headerlink" title="📗会议规定："></a>📗会议规定：</h3><p>每个工作日早上9点25准时开始<br>时长不超过15分钟<br>所有团队成员需要自觉按时到场，按时召开<br>同一时间只能有一个人发言，只说相关的问题，任何跑题或扩展讨论，请在会议结束后进行<br>团队成员最好提前准备发言内容，别的成员发言时，注意倾听</p><a id="more"></a> <h3 id="📘会议内容："><a href="#📘会议内容：" class="headerlink" title="📘会议内容："></a>📘会议内容：</h3><p>我昨天完成了什么？（你昨天做了什么来改变世界）<br>我今天要做什么？（你今天准备怎么做）<br>什么障碍拖延了我的进度？（你准备怎么突破任何不幸挡了你路的困难）</p><h3 id="📙会议目的"><a href="#📙会议目的" class="headerlink" title="📙会议目的"></a>📙会议目的</h3><p>项目进度定期同步<br>对目标有同样的理解<br>协调工作<br>分享问题和改进<br>识别为一个团队</p><h3 id="💥注意事项："><a href="#💥注意事项：" class="headerlink" title="💥注意事项："></a>💥注意事项：</h3><p>会议是团队成员互相交流，而不是工作报告<br>更多的是沟通互相的进度，而不是解决具体的问题，具体的问题，会后讨论<br>商量决定接下来还有什么需要做，谁来做，并为当天排一个计划</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;📖每日站会&quot;&gt;&lt;a href=&quot;#📖每日站会&quot; class=&quot;headerlink&quot; title=&quot;📖每日站会&quot;&gt;&lt;/a&gt;📖每日站会&lt;/h2&gt;&lt;h3 id=&quot;📗会议规定：&quot;&gt;&lt;a href=&quot;#📗会议规定：&quot; class=&quot;headerlink&quot; title=&quot;📗会议规定：&quot;&gt;&lt;/a&gt;📗会议规定：&lt;/h3&gt;&lt;p&gt;每个工作日早上9点25准时开始&lt;br&gt;时长不超过15分钟&lt;br&gt;所有团队成员需要自觉按时到场，按时召开&lt;br&gt;同一时间只能有一个人发言，只说相关的问题，任何跑题或扩展讨论，请在会议结束后进行&lt;br&gt;团队成员最好提前准备发言内容，别的成员发言时，注意倾听&lt;/p&gt;
    
    </summary>
    
    
      <category term="敏捷" scheme="http://blog.zzonn.com/categories/%E6%95%8F%E6%8D%B7/"/>
    
    
      <category term="站会" scheme="http://blog.zzonn.com/tags/%E7%AB%99%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>搭建NuGet服务并使用</title>
    <link href="http://blog.zzonn.com/2020/03/01/%E6%90%AD%E5%BB%BANuGet%E6%9C%8D%E5%8A%A1%E5%B9%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.zzonn.com/2020/03/01/%E6%90%AD%E5%BB%BANuGet%E6%9C%8D%E5%8A%A1%E5%B9%B6%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-01T12:06:44.000Z</published>
    <updated>2020-03-05T09:24:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建NuGet服务"><a href="#搭建NuGet服务" class="headerlink" title="搭建NuGet服务"></a>搭建NuGet服务</h2><p>使用BaGet（<a href="https://loic-sharma.github.io/BaGet/）快速搭建服务" target="_blank" rel="noopener">https://loic-sharma.github.io/BaGet/）快速搭建服务</a></p><p>可以直接部署到Web服务器，Docker或者其他云服务上，挺方便快捷的</p><h2 id="上传NuGet包"><a href="#上传NuGet包" class="headerlink" title="上传NuGet包"></a>上传NuGet包</h2><p><strong>Nuget服务地址</strong>：<a href="https://www.example.com" target="_blank" rel="noopener">https://www.example.com</a></p><p><strong>各种上传方式</strong>：<a href="https://www.example.com/upload" target="_blank" rel="noopener">https://www.example.com/upload</a></p> <a id="more"></a> <p><img src="https://blog.zzonn.com/images/img-4.png" alt="上传NuGet包"></p><h2 id="配置本地包源"><a href="#配置本地包源" class="headerlink" title="配置本地包源"></a>配置本地包源</h2><p> VS =&gt; 工具 =&gt; 选项 =&gt; NuGet包管理器 =&gt;程序包源</p><p> <strong>包源</strong>：<a href="https://www.example.com/v3/index.json" target="_blank" rel="noopener">https://www.example.com/v3/index.json</a> </p><p><img src="https://blog.zzonn.com/images/img-3.png" alt="配置本地包源"></p><h2 id="使用本地包源"><a href="#使用本地包源" class="headerlink" title="使用本地包源"></a>使用本地包源</h2><p><img src="https://blog.zzonn.com/images/img-1.png" alt="本地包源"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建NuGet服务&quot;&gt;&lt;a href=&quot;#搭建NuGet服务&quot; class=&quot;headerlink&quot; title=&quot;搭建NuGet服务&quot;&gt;&lt;/a&gt;搭建NuGet服务&lt;/h2&gt;&lt;p&gt;使用BaGet（&lt;a href=&quot;https://loic-sharma.github.io/BaGet/）快速搭建服务&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://loic-sharma.github.io/BaGet/）快速搭建服务&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以直接部署到Web服务器，Docker或者其他云服务上，挺方便快捷的&lt;/p&gt;
&lt;h2 id=&quot;上传NuGet包&quot;&gt;&lt;a href=&quot;#上传NuGet包&quot; class=&quot;headerlink&quot; title=&quot;上传NuGet包&quot;&gt;&lt;/a&gt;上传NuGet包&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Nuget服务地址&lt;/strong&gt;：&lt;a href=&quot;https://www.example.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.example.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各种上传方式&lt;/strong&gt;：&lt;a href=&quot;https://www.example.com/upload&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.example.com/upload&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://blog.zzonn.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="服务" scheme="http://blog.zzonn.com/tags/%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>简单Token验证机制</title>
    <link href="http://blog.zzonn.com/2020/02/15/%E7%AE%80%E5%8D%95Token%E9%AA%8C%E8%AF%81%E6%9C%BA%E5%88%B6/"/>
    <id>http://blog.zzonn.com/2020/02/15/%E7%AE%80%E5%8D%95Token%E9%AA%8C%E8%AF%81%E6%9C%BA%E5%88%B6/</id>
    <published>2020-02-15T03:36:18.000Z</published>
    <updated>2020-02-15T03:36:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h2><p><img src="https://blog.zzonn.com/images/1586269134119.png" alt="登录认证"></p><a id="more"></a> <h2 id="其他接口"><a href="#其他接口" class="headerlink" title="其他接口"></a>其他接口</h2><h4 id="验证token成功"><a href="#验证token成功" class="headerlink" title="验证token成功"></a>验证token成功</h4><p><img src="https://blog.zzonn.com/images/1586269223307.png" alt="验证token成功"></p><h4 id="验证token失败"><a href="#验证token失败" class="headerlink" title="验证token失败"></a>验证token失败</h4><p><img src="https://blog.zzonn.com/images/1586269281641.png" alt="验证token失败"></p><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><ol><li>refreshToken过期则要求用户重新登录</li><li>每次使用的时候，更新refreshToken的过期时间</li><li>使用JWT实现无状态Token时，需要尽量缩短Token的有效期，并使refreshToken在服务端有状态（便于控制，注销时可及时作废令牌）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;登录接口&quot;&gt;&lt;a href=&quot;#登录接口&quot; class=&quot;headerlink&quot; title=&quot;登录接口&quot;&gt;&lt;/a&gt;登录接口&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://blog.zzonn.com/images/1586269134119.png&quot; alt=&quot;登录认证&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="安全" scheme="http://blog.zzonn.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Token" scheme="http://blog.zzonn.com/tags/Token/"/>
    
  </entry>
  
  <entry>
    <title>开源工具推荐：Postwoman</title>
    <link href="http://blog.zzonn.com/2020/01/27/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90%EF%BC%9APostwoman/"/>
    <id>http://blog.zzonn.com/2020/01/27/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90%EF%BC%9APostwoman/</id>
    <published>2020-01-27T12:16:49.000Z</published>
    <updated>2020-01-27T12:16:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Postwoman主要特性如下："><a href="#Postwoman主要特性如下：" class="headerlink" title="Postwoman主要特性如下："></a>Postwoman主要特性如下：</h3><ul><li><p>快速：实时发送请求并获取/复制响应</p></li><li><p>支持 GET, HEAD, POST, PUT, DELETE, OPTIONS, PATCH 等方法；</p></li><li><p>支持验证</p></li><li><p>实时，发送请求即可获取响应。</p> <a id="more"></a> </li></ul><p>除此之外，随着开发的不断深入，Postwoman又添加了许多新特性，从而大大提高了可扩展性：</p><ul><li>自定义选项：<br>选择主题：Kinda Dark（默认），Clear White，Just Black和System主题<br>选择强调颜色：绿色（默认），黄色，粉红色，红色，紫色，橙色，青色和蓝色<br>切换彩色标题</li><li>PWA：<br>与Service Workers同时加载<br>离线支持<br>低RAM /内存和CPU使用率<br>添加到主屏幕（页脚中的按钮）<br>桌面PWA支持（页脚中的按钮）</li><li>WebSocket：通过单个TCP连接建立全双工通信通道。</li><li>支持身份验证，具有更高的安全性</li><li>实时，发送请求即可获取响应。</li><li>轻松，快速地创建和共享动态API文档</li></ul><h3 id="最后附上PostWoman相关的网站地址："><a href="#最后附上PostWoman相关的网站地址：" class="headerlink" title="最后附上PostWoman相关的网站地址："></a>最后附上PostWoman相关的网站地址：</h3><p>GitHub :<a href="https://github.com/liyasthomas/postwoman" target="_blank" rel="noopener">https://github.com/liyasthomas/postwoman</a><br>PostWoman官网：<a href="https://postwoman.launchaco.com/" target="_blank" rel="noopener">https://postwoman.launchaco.com/</a><br>PostWoman在线体验地址：<a href="https://postwoman.io/" target="_blank" rel="noopener">https://postwoman.io/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Postwoman主要特性如下：&quot;&gt;&lt;a href=&quot;#Postwoman主要特性如下：&quot; class=&quot;headerlink&quot; title=&quot;Postwoman主要特性如下：&quot;&gt;&lt;/a&gt;Postwoman主要特性如下：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;快速：实时发送请求并获取/复制响应&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持 GET, HEAD, POST, PUT, DELETE, OPTIONS, PATCH 等方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持验证&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实时，发送请求即可获取响应。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://blog.zzonn.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="接口" scheme="http://blog.zzonn.com/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>常用SQL备忘</title>
    <link href="http://blog.zzonn.com/2020/01/22/%E5%B8%B8%E7%94%A8SQL%E5%A4%87%E5%BF%98/"/>
    <id>http://blog.zzonn.com/2020/01/22/%E5%B8%B8%E7%94%A8SQL%E5%A4%87%E5%BF%98/</id>
    <published>2020-01-22T05:43:12.000Z</published>
    <updated>2020-01-22T05:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="保留两位小数"><a href="#保留两位小数" class="headerlink" title="保留两位小数"></a>保留两位小数</h1><p><strong>sql server:</strong></p><pre><code class="sql">select **Convert**(decimal(18,2),2.176544)  </code></pre><p>  结果：2.18</p><pre><code class="sql">select **CAST**(2.176544 as decimal(18,2))</code></pre><p>结果：2.18</p><pre><code class="sql">select **Round**(2.176544,2)　　</code></pre><p>结果：2.180000</p> <a id="more"></a> <p><strong>oracle:</strong><br>select trunc(1.23856789,2)<br>round(m,n) 四舍五入<br>trunc(m,n) 不四舍五入，直接丢弃。</p><h1 id="查询重复数据"><a href="#查询重复数据" class="headerlink" title="查询重复数据"></a>查询重复数据</h1><pre><code class="sql">select * from 表名 a where exists (select 1 from 表名 where 字段1=a.字段1 and 字段2=a.字段2 group by 字段1,字段2 having count(1)&gt;1)</code></pre><h1 id="递归查询数据"><a href="#递归查询数据" class="headerlink" title="递归查询数据"></a>递归查询数据</h1><pre><code class="sql">with cte as(    select Id,Pid,Name from 表名    where Id = 1    union all    select t.Id,t.Pid,t.Name from cte c inner join 表名 t    on c.Id = t.Pid)select * from cte</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;保留两位小数&quot;&gt;&lt;a href=&quot;#保留两位小数&quot; class=&quot;headerlink&quot; title=&quot;保留两位小数&quot;&gt;&lt;/a&gt;保留两位小数&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;sql server:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;select **Convert**(decimal(18,2),2.176544)  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  结果：2.18&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;select **CAST**(2.176544 as decimal(18,2))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果：2.18&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;select **Round**(2.176544,2)　　&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果：2.180000&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="http://blog.zzonn.com/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://blog.zzonn.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>数据库设计规范</title>
    <link href="http://blog.zzonn.com/2020/01/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>http://blog.zzonn.com/2020/01/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</id>
    <published>2020-01-15T01:57:54.000Z</published>
    <updated>2020-01-18T03:42:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h1><p>1.【推荐】字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循:</p><blockquote><p>不是频繁修改的字段。<br>不是 varchar 超长字段，更不能是 text 字段。<br>正例:商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存 储类目名称，避免关联查询。</p></blockquote><p>2.【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。 说明:如果预计2年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。<br>3.【推荐】id必须是主键，每个表必须有主键，且保持增长趋势的， 小型系统可以依赖于 MySQL 的自增主键，大型系统或者需要分库分表时才使用内置的 ID 生成器</p> <a id="more"></a> <p>4.【强制】id类型没有特殊要求，必须使用bigint unsigned，禁止使用int，即使现在的数据量很小。id如果是数字类型的话，必须是8个字节。</p><blockquote><p>方便对接外部系统，还有可能产生很多废数据<br>避免废弃数据对系统id的影响<br>未来分库分表，自动生成id，一般也是8个字节</p></blockquote><p>5.【推荐】字段尽量设置为 NOT NULL， 为字段提供默认值。 如字符型的默认值为一个空字符值串’’;数值型默认值为数值 0;逻辑型的默认值为数值 0;<br>6.【推荐】每个字段和表必须提供清晰的注释<br>7.【推荐】时间统一格式:‘YYYY-MM-DD HH:MM:SS’ 日期统一格式：‘YYYY-MM-DD‘<br>8.【强制】更新数据表记录时，必须同时更新记录对应的 UpdateTime 字段值为当前时间,<br>9.【推荐】不建立表之间主外键约束关系和字段属性约束， 用业务代码控制。<br>10.【推荐】字段不可再分 原则。如：1,2,3,4 存放在一个字段中。我们应该尽量采用表存储。<br>11.【推荐】一张数据表尽量只存储单一实体类型的数据</p><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><p>1.【强制】表达是与否概念的字段，必须使用 isxxx 的方式命名，数据类型是 bit ( 1表示是，0表示否)。</p><blockquote><p>正例:表达逻辑删除的字段名 isdeleted，1 表示删除，0 表示未删除。</p></blockquote><p>2.【强制】表名、字段名必须使用字母或数字，字母均小写，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p><blockquote><p>说明:MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库 名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。 正例:health_user，rdc_config，level3_name 反例:HealthUser，rdcConfig，level_3_name</p></blockquote><p>3.【强制】表名不使用复数名词。 </p><blockquote><p>说明:表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数 形式，符合表达习惯。</p></blockquote><p>4.【强制】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。<br>5.【强制】主键索引名为 pk_表名_字段名;唯一索引名为 uk_表名_字段名;普通索引名则为 idx_表名_字段名。</p><blockquote><p>说明:pk_ 即 primary key;uk_ 即 unique key;idx_ 即 index 的简称。</p></blockquote><p>6.【强制】表必备三字段:id, createtime, updatetime。需要逻辑删除数据表 isdeleted。 </p><blockquote><p>说明:其中id必为主键，类型为unsigned bigint、单表时自增、步长为1。createtime, updatetime 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被动更新。isdeleted 表示记录是否被逻辑删除，数据类型是bit ，1为是，0 为否。</p></blockquote><p>7.【强制】所有命名必须使用全名，有默认约定的除外，如果超过 30 个字符，使用缩写，请尽量名字易懂简短，</p><blockquote><p>如 description –&gt; desc;information –&gt; info;address –&gt; addr 等.单词之前下划线分割。</p></blockquote><p>8.【推荐】表的命名最好是加上“业务名称_表的作用”。 </p><blockquote><p>正例:health_user / trade_config</p></blockquote><p>9.【推荐】库名与应用名称尽量一致。如health<br>10.【推荐】如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释。<br>11.[强制]表之前有主从关系的。从表需要前匹配主表。</p><blockquote><p>如：sas_statisticstype，sas_statisticstypetable</p></blockquote><h2 id="数据库对象的前缀命名规范"><a href="#数据库对象的前缀命名规范" class="headerlink" title="数据库对象的前缀命名规范"></a>数据库对象的前缀命名规范</h2><p>以IMS系统统计分析为例，分析业务码sas</p><h3 id="表（业务码-表名）"><a href="#表（业务码-表名）" class="headerlink" title="表（业务码_表名）"></a>表（业务码_表名）</h3><blockquote><p>如：sas_statisticstype,IMS系统统计分析统计指标表。</p></blockquote><h3 id="视图-（v-业务码-名称）"><a href="#视图-（v-业务码-名称）" class="headerlink" title="视图 （v_业务码_名称）"></a>视图 （v_业务码_名称）</h3><p>v_业务码_名称</p><h3 id="存储过程（p-业务码-存储过程名称）"><a href="#存储过程（p-业务码-存储过程名称）" class="headerlink" title="存储过程（p_业务码_存储过程名称）"></a>存储过程（p_业务码_存储过程名称）</h3><h3 id="函数（f-业务码-函数名称）"><a href="#函数（f-业务码-函数名称）" class="headerlink" title="函数（f_业务码_函数名称）"></a>函数（f_业务码_函数名称）</h3><h1 id="类型规范"><a href="#类型规范" class="headerlink" title="类型规范"></a>类型规范</h1><p>1.表示状态字段(0-255)的使用 TINYINT UNSINGED，禁止使用枚举类型，注释必须清晰地说明每个枚举的含义，以及是否多选等<br>2.表示boolean类型的都使用bit,因为mysql本身是没有boolean类型的，在自动生成代码的时候，DO对象的字段就是boolean类型，</p><blockquote><p>例如 isdelete;其余所有时候都使用TINYINT(4)<br>TINYINT(4),这个括号里面的数值并不是表示使用多大空间存储，而是最大显示宽度，并且只有字段指定zerofill时有用，没有zerofill，(m)就是无用的,例如id BIGINT ZEROFILL NOT NULL,所以建表时就使用默认就好了，不需要加括号了，除非有特殊需求，例如TINYINT(1)代表boolean类型。<br>TINYINT(1)，TINYINT(4)都是存储一个字节，并不会因为括号里的数字改变。例如TINYINT(4)存储22则会显示0022，因为最大宽度为4，达不到的情况下用0来补充。</p></blockquote><p>3.【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。</p><blockquote><p>类型    字节    表示范围<br>tinyint    1    无符号值: 0～255;有符号值： -128<del>127<br>smallint    2    无符号值: 0～65536;有符号值： -32768</del>32767<br>mediumint    3    无符号值: 0～16777215;有符号值： -8388608<del>8388607<br>int    4    无符号值: 0</del>4294967295;有符号值： -2147483648<del>2147483647<br>bigint    8    无符号值: 0</del>((2³²×²)-1);有符号值： -(2³²×²)/2 ~ (2³²×²)/2-1</p></blockquote><p>4.非负的数字类型字段，都添加上 UNSINGED, 如可以使用 INT UNSINGED 字段存 IPV4<br>5.时间字段使用时间日期类型，不要使用字符串类型存储，日期使用DATE类型，日期时间使用DATETIME<br>6.【强制】小数类型为 decimal，禁止使用 float 和 double。</p><blockquote><p>说明:float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不 正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。decimal（18,0），decimal（18,2），decimal（18,4），decimal（18,6）</p></blockquote><p>7.【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。<br>8.【强制】字符串VARCHAR(N), 其中 N表示字符个数，请尽量减少 N 的大小，varchar，nvarchar 是可变长字符串，不预先分配存储空间，长度不要超过 4000，如果存储长 度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索 引效率。 </p><blockquote><p>参考：<br>varchar，nvarchar：<br>varchar（20），varchar（50），varchar（100），varchar（200），varchar（500），varchar（1000），varchar（2000），varchar（4000）。</p></blockquote><p>9.image 和 Text 类型所存储的数据量大，删除和修改操作容易在数 据表里产生大量的碎片，避免使用 image 或 Text 类型。</p><h1 id="索引规范"><a href="#索引规范" class="headerlink" title="索引规范"></a>索引规范</h1><p>1.【推荐】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。并不一定是聚集索引。<br>不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明 显的;另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</p><p>2.【强制】超过三个表不建议join,需要join 的字段，数据类型必须绝对一致;多表关联查询时， 保证被关联的字段需要有索引。即使双表 join 也要注意表索引、SQL 性能。</p><p>3.【强制】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据 实际文本区分度决定索引长度即可。 说明:索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用 count(distinct left(列名, 索引长度))/count(*)的区分度来确定。</p><p>4.【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。<br>索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p><p>5.【推荐】如果有 order by 的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现 file_sort 的情况，影响查询性能。</p><blockquote><p>正例:where a=? and b=? order by c; 索引:a_b_c 反例:索引中有范围查找，那么索引有序性无法利用，如:WHERE a&gt;10 ORDER BY b; 索引 a_b 无法排序。</p></blockquote><p>6.【推荐】利用覆盖索引来进行查询操作，避免回表。<br>说明:如果一本书需要知道第11章是什么标题，会翻开第11章对应的那一页吗?目录浏览一下就好，这个目录就是起到覆盖索引的作用。</p><blockquote><p>正例:能够建立索引的种类:主键索引、唯一索引、普通索引，而覆盖索引是一种查询的效果，用explain的结果，extra列会出现:using index。</p></blockquote><p>7.【推荐】利用延迟关联或者子查询优化超多分页场景。</p><blockquote><p>说明:MySQL并不是跳过 offset 行，而是取 offset+N 行，然后返回放弃前 offset 行，返回 N 行，那当 offset 特别大的时候，效率就非常的低下，要么控制返回的总页数，要么对超过特定阈值的页数进行 SQL 改写。<br>正例:先快速定位需要获取的 id 段，然后再关联:<br>SELECT a.* FROM 表 1 a, (select id from 表 1 where 条件 LIMIT 100000,20 ) b where a.id=b.id</p></blockquote><p>8.【推荐】SQL 性能优化的目标:至少要达到 range 级别，要求是 ref 级别，如果可以是 consts 最好。</p><blockquote><p>说明:<br>consts 单表中最多只有一个匹配行(主键或者唯一索引)，在优化阶段即可读取到数据。<br>ref 指的是使用普通的索引(normal index)。<br>range 对索引进行范围检索。<br>反例:explain 表的结果，type=index，索引物理文件全扫描，速度非常慢，这个 index 级 别比较 range 还低，与全表扫描是小巫见大巫。</p></blockquote><p>9.【推荐】建组合索引的时候，区分度最高的在最左边。</p><blockquote><p>正例:如果 where a=? and b=? ，a 列的几乎接近于唯一值，那么只需要单建 idx_a 索引即 可。<br>说明:存在非等号和等号混合判断条件时，在建索引时，请把等号条件的列前置。如:where a&gt;? and b=? 那么即使 a 的区分度更高，也必须把 b 放在索引的最前列。</p></blockquote><p>10【推荐】防止因字段类型不同造成的隐式转换，导致索引失效。存在索引计算转换。</p><p>11.【参考】创建索引时避免有如下极端误解</p><blockquote><p>宁滥勿缺。认为一个查询就需要建一个索引。<br>宁缺勿滥。认为索引会消耗空间、严重拖慢更新和新增速度。<br>抵制惟一索引。认为业务的惟一性一律需要在应用层通过“先查后插”方式解决。</p></blockquote><ol start="12"><li><p>总结</p><ul><li>• 索引占磁盘空间，不要重复的索引，尽量短<br>• 只给常用的查询条件加索引<br>• 过滤性高的列建索引，取值范围固定的列不建索引<br>• 唯一的记录添加唯一索引<br>• 频繁更新的列不要建索引<br>• 不要对索引列运算<br>• 同样过滤效果下，保持索引长度最小<br>• 合理利用组合索引，注意索引字段先后顺序<br>• 多列组合索引，过滤性高的字段最前<br>• order by 字段建立索引，避免 filesort<br>• 组合索引，不同的排序顺序不能使用索引<br>• &lt;&gt;!=无法使用索引</li></ul></li></ol><h1 id="SQL规范"><a href="#SQL规范" class="headerlink" title="SQL规范"></a>SQL规范</h1><p>1.【强制】不要使用 count(列名)或 count(常量)来替代 count()，count()是 SQL92 定义的 标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p><p>2.【强制】count(主键) 计算该列除 NULL 之外的不重复行数，count(distinct col1, col2) 如果其中一列全为NULL，那么即使另一列有不同的值，也返回为0。<br>3.【强制】当某一列col的值全是 NULL 时，count(col)的返回结果为 0，但 sum(col)的返回结果为 NULL，因此使用 sum()时需注意 NPE 问题。</p><blockquote><p>正例:可以使用如下方式来避免sum的NPE问题:SELECT IF(ISNULL(SUM(g)),0,SUM(g)) FROM table;</p></blockquote><p>4.【强制】使用 ISNULL()来判断是否为 NULL 值。 </p><blockquote><p>说明:NULL 与任何值的直接比较都为 NULL。<br>NULL&lt;&gt;NULL的返回结果是NULL，而不是false。<br>NULL=NULL的返回结果是NULL，而不是true。<br>NULL&lt;&gt;1的返回结果是NULL，而不是true。</p></blockquote><p>5.【强制】 在代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。<br>6.【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</p><blockquote><p>说明:以学生和成绩的关系为例，学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为 级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群;级联更新是强阻 塞，存在数据库更新风暴的风险;外键影响数据库的插入速度。</p></blockquote><p>7.<del>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。<br>~</del><br>8.【强制】数据订正时，删除和修改记录时，要先 select，避免出现误删除，确认无误才能执行更新语句。</p><p>9.【推荐】in操作能避免则避免，若实在避免不了，需要仔细评估 in 后边的集合元素数量，控<br>制在 <del>1000</del> （300）个之内。</p><p>10.【参考】如果有全球化需要，所有的字符存储与表示，均以 utf-8 编码，注意字符统计函数 的区别。</p><blockquote><p>查看SQLserver编码格式的SQL语句<br>SELECT  COLLATIONPROPERTY(‘Chinese_PRC_CI_AS’, ‘CodePage’)<br>下面是查询结果：<br>*<em>936 简体中文GBK *</em><br>950 繁体中文BIG5<br>437 美国/加拿大英语<br>932 日文<br>949 韩文<br>866 俄文<br>65001 unicode UFT-8</p></blockquote><p>11.【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发trigger，有可能造成事故，故不建议在开发代码中使用此语句。</p><blockquote><p>说明:TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p></blockquote><p>12.【推荐】不要写一个大而全的数据更新接口。传入为 POJO 类，不管是不是自己的目标更新字 段，都进行 update table set c1=value1,c2=value2,c3=value3; 这是不对的。执行 SQL 时，不要更新无改动的字段，一是易出错;二是效率低;三是增加 binlog 存储。<br>13.[推荐]更新删除数据尽量通过主键操作。<br>13.总结</p><p>• 能够快速缩小结果集的 WHERE 条件写在前面，如果有恒量条 件，也尽量放在前面 ，例如 where 1=1<br>• 避免使用 GROUP BY、DISTINCT 等语句的使用，避免联表查 询和子查询<br>• 能够使用索引的字段尽量进行有效的合理排列<br>• 针对索引字段使用 &gt;, &gt;=, =, &lt;, &lt;=, IF NULL 和 BETWEEN 将会 使用索引，如果对某个索引字段进行 LIKE 查询，使用 LIKE   ‘%abc%’ 不能使用索引，使用 LIKE ‘abc%’ 将能够使用索引<br>• 如果在 SQL 里使用了 MySQL部分自带函数，索引将失效<br>• 避免直接使用 select *,只取需要的字段，增加使用覆盖索引使用的可能<br>• 对于大数据量的查询，尽量避免在 SQL 语句中使用 order by 字。</p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="http://www.kokojia.com/article/25670.html" target="_blank" rel="noopener">http://www.kokojia.com/article/25670.html</a><br><a href="https://developer.aliyun.com/article/709387" target="_blank" rel="noopener">https://developer.aliyun.com/article/709387</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计规范&quot;&gt;&lt;a href=&quot;#设计规范&quot; class=&quot;headerlink&quot; title=&quot;设计规范&quot;&gt;&lt;/a&gt;设计规范&lt;/h1&gt;&lt;p&gt;1.【推荐】字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是频繁修改的字段。&lt;br&gt;不是 varchar 超长字段，更不能是 text 字段。&lt;br&gt;正例:商品类目名称使用频率高，字段长度短，名称基本一成不变，可在相关联的表中冗余存 储类目名称，避免关联查询。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。 说明:如果预计2年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。&lt;br&gt;3.【推荐】id必须是主键，每个表必须有主键，且保持增长趋势的， 小型系统可以依赖于 MySQL 的自增主键，大型系统或者需要分库分表时才使用内置的 ID 生成器&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://blog.zzonn.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="规范" scheme="http://blog.zzonn.com/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>API接口规范</title>
    <link href="http://blog.zzonn.com/2020/01/03/API%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83/"/>
    <id>http://blog.zzonn.com/2020/01/03/API%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83/</id>
    <published>2020-01-03T07:11:04.000Z</published>
    <updated>2020-01-03T07:11:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、协议"><a href="#一、协议" class="headerlink" title="一、协议"></a>一、协议</h1><p>API与客户端用户的通信协议，总是使用HTTPS协议，以确保交互数据的传输安全。</p><h1 id="二、域名"><a href="#二、域名" class="headerlink" title="二、域名"></a>二、域名</h1><p>应该尽量将API部署在专用域名之下：                         <a href="https://api.example.com" target="_blank" rel="noopener">https://api.example.com</a><br>如果确定API很简单,不会有进一步扩展,可以考虑放在主域名下：   <a href="https://www.example.com/api" target="_blank" rel="noopener">https://www.example.com/api</a></p> <a id="more"></a> <h1 id="三、版本控制"><a href="#三、版本控制" class="headerlink" title="三、版本控制"></a>三、版本控制</h1><p><a href="https://api.example.com/v{n}" target="_blank" rel="noopener">https://api.example.com/v{n}</a></p><ol><li>应该将API的版本号放入URL。</li><li>采用多版本并存，增量发布的方式。</li><li>n代表版本号，分为整型和浮点型<br>整型：    大功能版本，  如v1、v2、v3 …<br>浮点型：  补充功能版本， 如v1.1、v1.2、v2.1、v2.2 …</li><li>对于一个 API 或服务，应在生产中最多保留 3 个最详细的版本</li></ol><h1 id="四、路径规则"><a href="#四、路径规则" class="headerlink" title="四、路径规则"></a>四、路径规则</h1><p>路径又称”终点”（end point），表示API的具体网址。</p><ol><li>在RESTful架构中，每个网址代表一种资源(resource),所以网址中不能有动词，只能有名词。<br> 【所用的名词往往与数据库的表格名对应】</li><li>数据库中的表一般都是同种记录的”集合”(collection),所以API中的名词也应该使用复数。</li></ol><p>例子: <a href="https://api.example.com/v1/products" target="_blank" rel="noopener">https://api.example.com/v1/products</a><br>      <a href="https://api.example.com/v1/users" target="_blank" rel="noopener">https://api.example.com/v1/users</a><br>      <a href="https://api.example.com/v1/employees" target="_blank" rel="noopener">https://api.example.com/v1/employees</a></p><h1 id="五、请求方式"><a href="#五、请求方式" class="headerlink" title="五、请求方式"></a>五、请求方式</h1><p>GET（SELECT）：    从服务器取出资源（一项或多项）。<br>POST（CREATE）：   在服务器新建一个资源。<br>PUT（UPDATE）：    在服务器更新资源（客户端提供改变后的完整资源）。<br>DELETE（DELETE）： 从服务器删除资源。</p><p>例子：<br>GET    /v1/products      获取所有商品<br>GET    /v1/products/ID   获取某个指定商品的信息<br>POST   /v1/products      新建一个商品<br>PUT    /v1/products/ID   更新某个指定商品的信息<br>DELETE /v1/products/ID   删除某个商品,更合理的设计详见【9、非RESTful API的需求】<br>GET    /v1/products/ID/purchases      列出某个指定商品的所有投资者<br>GET    /v1/products/ID/purchases/ID   获取某个指定商品的指定投资者信息</p><h1 id="六、过滤信息"><a href="#六、过滤信息" class="headerlink" title="六、过滤信息"></a>六、过滤信息</h1><p>若记录数量很多，服务器不可能返回全部记录给用户。<br>API应该提供分页参数及其它筛选参数，过滤返回结果。</p><p>/v1/products?page=1&amp;pageSize=20     指定第几页，以及每页的记录数。<br>/v1/products?sortBy=name&amp;order=asc  指定返回结果按照哪个属性排序，以及排序顺序。</p><h1 id="七、传入参数"><a href="#七、传入参数" class="headerlink" title="七、传入参数"></a>七、传入参数</h1><p>传入参数分为4种类型：</p><ol><li>cookie：         一般用于OAuth认证</li><li>request header： 一般用于OAuth认证</li><li>请求body数据：</li><li>地址栏参数：<br> 1）restful 地址栏参数 /v1/products/ID ID为产品编号，获取产品编号为ID的信息<br> 2）get方式的查询字段 见【六、过滤信息】</li></ol><h1 id="八、公共参数"><a href="#八、公共参数" class="headerlink" title="八、公共参数"></a>八、公共参数</h1><h2 id="1-APP-端请求"><a href="#1-APP-端请求" class="headerlink" title="1.APP 端请求"></a>1.APP 端请求</h2><table><thead><tr><th>参数</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>network</td><td>网络</td><td>WIFI、4G</td></tr><tr><td>operator</td><td>运营商</td><td>中国联通/移动</td></tr><tr><td>platform</td><td>平台</td><td>iOS、Android</td></tr><tr><td>system</td><td>系统</td><td>ios 13.3、android 9</td></tr><tr><td>device</td><td>设备型号</td><td>iPhone XR、小米9</td></tr><tr><td>udid</td><td>设备唯</td><td>标示</td></tr><tr><td>apiVersion</td><td>API 版本号</td><td>v1.1、v1.2</td></tr></tbody></table><h2 id="2-WEB-端请求"><a href="#2-WEB-端请求" class="headerlink" title="2.WEB 端请求"></a>2.WEB 端请求</h2><table><thead><tr><th>参数</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>appKey</td><td>授权Key</td><td>字符串</td></tr></tbody></table><blockquote><p>[info] 调用方需向服务方申请 appKey（请求时使用） 和 secretKey（加密时使用）。</p></blockquote><h1 id="九、响应参数"><a href="#九、响应参数" class="headerlink" title="九、响应参数"></a>九、响应参数</h1><p>【response】：</p><hr><pre><code class="json">{   status: 200,               // 详见【status】   data: {      code: 1,                // 详见【code】      data: {} || [],         // 数据      message: &#39;成功&#39;,        // 存放响应信息提示,显示给客户端用户【须语义化中文提示】      sysMessage: &#39;success&#39;   // 存放响应信息提示,调试使用,中英文都行      ...                     // 其它参数，如 total【总记录数】等   },   msg: &#39;成功&#39;,            // 存放响应信息提示,显示给客户端用户【须语义化中文提示】   sysMsg: &#39;success&#39;       // 存放响应信息提示,调试使用,中英文都行}</code></pre><hr><p>【status】:</p><p>200：OK<br>400：Bad Request<br>401：Unauthorized<br>403：Forbidden<br>404：Not Found<br>500：Internal Server Error</p><p>【code】:</p><p>1：获取数据成功 | 操作成功<br>0：获取数据失败 | 操作失败</p><hr><p> 若有分页数据返回的，格式如下：</p><pre><code class="json">{    &quot;code&quot;: 1,    &quot;showMsg&quot;: &quot;success&quot;,    &quot;errorMsg&quot;: &quot;&quot;,    &quot;data&quot;: {         &quot;list&quot;: [],         &quot;pagination&quot;: {             &quot;total&quot;: 100,             &quot;currentPage&quot;: 1,             &quot;prePageCount&quot;: 10         }     }}</code></pre><h1 id="十、非RESTful-API的需求"><a href="#十、非RESTful-API的需求" class="headerlink" title="十、非RESTful API的需求"></a>十、非RESTful API的需求</h1><ol><li>实际业务开展过程中，可能会出现各种的api不是简单的restful 规范能实现的。</li><li>需要有一些api突破restful规范原则。</li><li>特别是移动互联网的api设计，更需要有一些特定的api来优化数据请求的交互。<br> 1)、删除单个 | 批量删除  ： DELETE  /v1/product      body参数{ids：[]}<br> 2)、页面级API           :  把当前页面中需要用到的所有数据通过一个接口一次性返回全部数据</li></ol><h1 id="十一、一致性原则"><a href="#十一、一致性原则" class="headerlink" title="十一、一致性原则"></a>十一、一致性原则</h1><ol><li>前端需要哪些字段，API接口应该返回哪些字段，字段不多也不少。</li><li>更新功能尽量做到：初次返回的原始数据参数与提交更新的数据参数结构一致。</li><li>时间参数，尽量以时间戳13位传递。</li><li>其它参数【待更新】</li></ol><h1 id="十二、接口文档"><a href="#十二、接口文档" class="headerlink" title="十二、接口文档"></a>十二、接口文档</h1><ol><li>尽量采用自动化接口文档，可以做到在线测试，同步更新。</li><li>应包含：接口BASE地址、接口版本、接口模块分类等。</li><li>每个接口应包含：<br>接口地址：不包含接口BASE地址。<br>请求方式: get、post、put、delete等。<br>请求参数：数据格式【默认JSON、可选form data】、数据类型、是否必填、中文描述。<br>响应参数：类型、中文描述。</li></ol><h1 id="十三、参考资料"><a href="#十三、参考资料" class="headerlink" title="十三、参考资料"></a>十三、参考资料</h1><ol><li><a href="https://my.oschina.net/qqlet/blog/1922038" target="_blank" rel="noopener">https://my.oschina.net/qqlet/blog/1922038</a></li><li><a href="https://juejin.im/post/5afee0e86fb9a07ab379b371" target="_blank" rel="noopener">https://juejin.im/post/5afee0e86fb9a07ab379b371</a></li><li><a href="https://www.jianshu.com/p/3f8953f73a79" target="_blank" rel="noopener">https://www.jianshu.com/p/3f8953f73a79</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、协议&quot;&gt;&lt;a href=&quot;#一、协议&quot; class=&quot;headerlink&quot; title=&quot;一、协议&quot;&gt;&lt;/a&gt;一、协议&lt;/h1&gt;&lt;p&gt;API与客户端用户的通信协议，总是使用HTTPS协议，以确保交互数据的传输安全。&lt;/p&gt;
&lt;h1 id=&quot;二、域名&quot;&gt;&lt;a href=&quot;#二、域名&quot; class=&quot;headerlink&quot; title=&quot;二、域名&quot;&gt;&lt;/a&gt;二、域名&lt;/h1&gt;&lt;p&gt;应该尽量将API部署在专用域名之下：                         &lt;a href=&quot;https://api.example.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://api.example.com&lt;/a&gt;&lt;br&gt;如果确定API很简单,不会有进一步扩展,可以考虑放在主域名下：   &lt;a href=&quot;https://www.example.com/api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.example.com/api&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://blog.zzonn.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="规范" scheme="http://blog.zzonn.com/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Windows错误代码对应解决方案</title>
    <link href="http://blog.zzonn.com/2019/11/17/Windows%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E5%AF%B9%E5%BA%94%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://blog.zzonn.com/2019/11/17/Windows%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E5%AF%B9%E5%BA%94%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2019-11-17T02:21:42.000Z</published>
    <updated>2019-11-17T02:21:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错误代码0x80131500"><a href="#错误代码0x80131500" class="headerlink" title="错误代码0x80131500"></a>错误代码0x80131500</h1><ol><li>打开“运行”输入 inetcpl.cpl （“WINDOWS”+“R”键，输入 inetcpl.cpl亦可）</li><li>点开高级往下拉，勾上”使用TLS 1.2”选项，或者点还原高级设置。</li></ol> <a id="more"></a> ]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;错误代码0x80131500&quot;&gt;&lt;a href=&quot;#错误代码0x80131500&quot; class=&quot;headerlink&quot; title=&quot;错误代码0x80131500&quot;&gt;&lt;/a&gt;错误代码0x80131500&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;打开“运行”输入 inetcpl.cpl （“WINDOWS”+“R”键，输入 inetcpl.cpl亦可）&lt;/li&gt;
&lt;li&gt;点开高级往下拉，勾上”使用TLS 1.2”选项，或者点还原高级设置。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="http://blog.zzonn.com/categories/Windows/"/>
    
    
      <category term="Windows" scheme="http://blog.zzonn.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.zzonn.com/2019/10/03/hello-world/"/>
    <id>http://blog.zzonn.com/2019/10/03/hello-world/</id>
    <published>2019-10-03T08:31:04.000Z</published>
    <updated>2019-10-03T08:31:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p> <a id="more"></a> <h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://blog.zzonn.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://blog.zzonn.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
</feed>
